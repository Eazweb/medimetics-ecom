generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  password  String
  isAdmin   Boolean   @default(false)
  products  Product[]
  cart      Cart[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Order     Order[]
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  mainImage   String
  quantity    Int
  otherImages String
  sizes       String[]
  colors      String[]
  categories  Category[]
  cart        Cart[]
  order       Order[]
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
}

model Category {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  productId String  @db.ObjectId
  products  Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  quantity  Int      @default(1)
  product   Product? @relation(fields: [productId], references: [id])
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  quantity      Int
  status        OrderStatus @default(PENDING)
  paymentMethod String
  addressId     String      @db.ObjectId
  address       Address     @relation(fields: [addressId], references: [id])
  usersId       String      @db.ObjectId
  user          User        @relation(fields: [usersId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Product       Product?    @relation(fields: [productId], references: [id])
  productId     String?     @db.ObjectId
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  street      String
  city        String
  state       String
  country     String
  postalCode  String
  phoneNumber String
  order       Order[]
}
